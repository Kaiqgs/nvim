
local ls = require("luasnip")
local function fn(
    args,     -- text from i(2) in this example i.e. { { "456" } }
    parent,   -- parent snippet or parent node
    user_args -- user_args from opts.user_args
)
    return user_args:format(tostring(args[1][1]))
end

return {
    ls.snippet({
        trig = "re",
        name = "require",
        desc = "adds require for module",
    }, {
        ls.text_node("local "),
        ls.insert_node(1, "reqfile"),
        ls.text_node(' = require("'),
        ls.insert_node(2, "main"),
        ls.function_node(fn, { 1 }, { user_args = { '.%s")' } }),
        ls.text_node({ "", "" }),
    }),
    
    ls.snippet({
        trig = "rc",
        name = "require_common",
        desc = "require specific for defold common",
    }, {
        ls.text_node("local "),
        ls.insert_node(1, "reqfile"),
        ls.function_node(
            fn,
            { 1 },
            { user_args = { ' = require("common.%s")' } }
        ),
        ls.text_node({ "", "" }),
    }),

    ls.snippet({
        trig = "transition",
        name = "transition",
        desc = "fsm transition",
    }, {
        ls.text_node(":transition(states[s."),
        ls.insert_node(1, "state_a"),
        ls.text_node("], states[s."),
        ls.insert_node(2, "state_b"),
        ls.text_node({ "])" }),
    }),

    ls.snippet({
        trig = "localM",
        name = "new module",
        desc = "creates a new empty lua module",
    }, {
        ls.text_node({ "local M = {}", "return M" }),
    }),

    ls.snippet({
        trig = "newfsm",
        name = "finite state machine",
        desc = "creates new fsm",
    }, {
        ls.text_node({

            'local s = { start = "" }',
            "util.key_mirror(s)",
            "local states = { [s.start] = fsb.FiniteStateBuilder(s.start):build() }",
            "local state_machine = fsm.FiniteStateMachine({ states = states }):start(states[s.start], {})",
            "return state_machine",
        }),
    }),

    ls.snippet({
        trig = "newstate",
        name = "new state",
        desc = "creates new state",
    }, {
        ls.text_node("[s."),
        ls.insert_node(1, "state"),
        -- :build()
        ls.function_node(
            fn,
            { 1 },
            { user_args = { "] = fsb.FiniteStateBuilder(s.%s)" } }
        ),
        ls.insert_node(2, ""),
        ls.text_node({ ":build()" }),
        -- [s.chill] = fsb.FiniteStateBuilder(s.chill):build(),
    }),

    ls.snippet({
        trig = "predto",
        name = "predicate to",
        desc = "builds new predicate to state",
    }, {
        ls.text_node(":predicate_to(s."),
        ls.insert_node(1, "state"),
        ls.text_node(", "),
        ls.insert_node(2, "function(self, otherstate) end"),
        ls.text_node({ ")" }),
    }),

    new
    -- ls.snippet({
    --
    -- })
}
